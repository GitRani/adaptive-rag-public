
services:
  postgres:
    container_name: my-postgres
    image: postgres:16
    ports:
      - "${POSTGRE_DB_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRE_DB_NAME}
      POSTGRES_USER: ${POSTGRE_DB_USER}
      POSTGRES_PASSWORD: ${POSTGRE_DB_PASSWORD}
    volumes:
      - ${POSTGRE_DB_VOLUME}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRE_DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app_network

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=${ETCD_AUTO_COMPACTION_MODE}
      - ETCD_AUTO_COMPACTION_RETENTION=${ETCD_AUTO_COMPACTION_RETENTION}
      - ETCD_QUOTA_BACKEND_BYTES=${ETCD_QUOTA_BACKEND_BYTES}
      - ETCD_SNAPSHOT_COUNT=${ETCD_SNAPSHOT_COUNT}
    volumes:
      - ${ETCD_VOLUME}:/etcd
    command: etcd -advertise-client-urls=${ETCD_ADVERTISE_URL} -listen-client-urls ${ETCD_LISTEN_URL} --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app_network

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    ports:
      - "${MINIO_CONSOLE_PORT}:9001"
      - "${MINIO_PORT}:9000"
    volumes:
      - ${MINIO_VOLUME}:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app_network

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.4.17
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: ${ETCD_ENDPOINTS}
      MINIO_ADDRESS: ${MINIO_ADDRESS}
    volumes:
      - ${MILVUS_VOLUME}:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "${MILVUS_PORT}:19530"
      - "${MILVUS_API_PORT}:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - app_network

  fastapi:
    container_name: my-fastapi
    build:
      context: .  # FastAPI 코드가 있는 디렉토리
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      standalone:
        condition: service_healthy
    environment:
      POSTGRE_DB_HOST: my-postgres
      POSTGRE_DB_PORT: ${POSTGRE_DB_PORT}
      POSTGRE_DB_USER: ${POSTGRE_DB_USER}
      POSTGRE_DB_PASSWORD: ${POSTGRE_DB_PASSWORD}
      POSTGRE_DB_NAME: ${POSTGRE_DB_NAME}
      MILVUS_HOST: milvus-standalone
      MILVUS_PORT: ${MILVUS_PORT}
      TAVILY_API_KEY: ${TAVILY_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      LANGSMITH_API_KEY: ${LANGSMITH_API_KEY}
      LANGCHAIN_TRACING_V2: ${LANGCHAIN_TRACING_V2}
      LANGCHAIN_ENDPOINT: ${LANGCHAIN_ENDPOINT}
      LANGCHAIN_PROJECT: ${LANGCHAIN_PROJECT}
      LOG_PATH: ${LOG_PATH}
      LOG_MAX_BYTES: ${LOG_MAX_BYTES}
      LOG_BACKUP_COUNT: ${LOG_BACKUP_COUNT}
      LOG_WHEN: ${LOG_WHEN}
      LOG_INTERVAL: ${LOG_INTERVAL}
      LOG_LEVEL: ${LOG_LEVEL}
    volumes:
      - ${FASTAPI_VOLUME}:/app/data
    networks:
      - app_network

networks:
  app_network:
    name: app_network